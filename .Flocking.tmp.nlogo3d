
;;; Breed Declarations
breed [predators predator]  ;; Defines a breed for predators with plural and singular names.
breed [preys prey]          ;; Defines a breed for preys.
breed [leaves leaf]         ;; Defines a breed for leaves, representing environmental resources.

;;; Properties of Turtles
turtles-own [
  flockmates           ;; agentset of nearby turtles
  nearest-neighbor     ;; Stores the closest turtle within the flockmates agentset.
  energy               ;; Numeric variable to hold energy levels for survival and activities.
]

predators-own [
  predator-gain-from-prey  ;; Defines the amount of energy gained by predators after eating a prey.
]
;;; Global Variables
globals [
  scale                 ;; Scale factor for movements and interactions.
  predator-reproduce    ;; Reproduction rate or probability for predators.
  prey-reproduce        ;; Reproduction rate or probability for preys.
  max-predators         ;; Maximum allowed number of predators in the environment.
  leaf-energy-gain      ;; Energy gained by consuming a leaf.
]

to setup
  clear-all
  set scale 0.25
  set prey-reproduce 5      ;; Set reproduction rate for prey, e.g., 5% chance of reproducing each tick.
  set prey-reproduce 5      ;; Set the prey reproduction rate (e.g., 5%)
  set max-predators 5       ;; Initialize max-predators
  set unlimited-energy? false  ;; Initialize to false; can be toggled on/off as needed
  let initial-energy (ifelse-value unlimited-energy? [10000] [200])  ;; Conditional initial energy based on mode.

  ;; Create predators
  create-predators population-predator [  ;; Assuming an initial population of 10 predators
    set color red
    set size 2
    set energy initial-energy
    set predator-gain-from-prey 20  ;; Energy gained from consuming a prey.
    setxyz random-xcor random-ycor random-zcor ;; Place randomly in space.
    right random-float 360 ;; Randomize initial orientation.
    tilt-up asin (1.0 - random-float 2.0) ;; Randomize initial pitch.
    roll-right random-float 360
    set flockmates no-turtles
  ]
  ;; Create preys
  create-preys population [  ;; Assuming an initial population of 100 preys
    set color green
    set size 1.5
    set energy initial-energy
    setxyz random-xcor random-ycor random-zcor
    right random-float 360
    tilt-up asin (1.0 - random-float 2.0)
    roll-right random-float 360
    set flockmates no-turtles
  ]
  setup-trees  ;; Call procedure to create environmental trees/leaves.
  set leaf-energy-gain 10  ;; Set energy gain from consuming a leaf.
  reset-ticks ;; Reset the tick counter for the simulation.
end
;;; Main Simulation Loop
to go
  ask predators [
    flock
    if not unlimited-energy? [
      set energy energy - 0.5 ;; Decrease energy due to metabolism if not in unlimited energy mode.
    ]
    eat-prey ;; Predators attempt to eat prey.
    death  ;; Check if predator dies due to low energy.
    reproduce-predators  ;; Reproduce if conditions are met.
    search-for-leaves  ;; Optional: predators searching for leaves (not typical behavior but can be used for specific scenarios).
    fd scale / 2  ;; Move forward by half the scale factor.
  ]
  ;; Actions for preys
  ask preys [
    flock
    if not unlimited-energy? [
      ;; Decrease energy due to metabolism if not in unlimited energy mode.
      set energy energy - 0.5
    ]
    death  ;; Check if prey dies due to low energy.
    reproduce-preys  ;; Reproduce if conditions are met.
    search-for-leaves  ;; Search and potentially eat leaves.
    fd scale / 2  ;; Move forward by half the scale factor.
  ]
  display
  tick
end


to setup-trees
  ;; Base of the tree starts slightly above the ground
  let init-x 0
  let init-y 0
  let init-z 3  ;; Base z-coordinate slightly above the world's midpoint for visual effect

  ;; Predefined color list for leaves
  let colors [ yellow white pink ]

  ;; Adjust the distribution of leaves to ensure the tree is visually centered.
  create-leaves 256 [
    ;; Randomly position leaves in a spherical distribution
    let r 10  ;; Radius around the tree base for leaf distribution
    let theta random-float 360  ;; Angle around the z-axis for horizontal spread
    let phi acos (2 * random-float 1 - 1)  ;; Angle from vertical for even distribution

    ;; Convert spherical coordinates to Cartesian for leaf placement
    let x r * sin phi * cos theta
    let y r * sin phi * sin theta
    let z r * cos phi + init-z  ;; Add init-z to vertically center leaves around the base

    ;; Set leaf properties and position
    setxyz init-x + x init-y + y z
    set shape "line"  ;; Simple line shape for leaves
    ;; Assign a random color from the predefined list
    set color one-of colors
    set size 1  ;; Leaf size, adjust as needed
  ]
end


to eat-prey
  let target-prey one-of preys-here
  if target-prey != nobody [
    ifelse not unlimited-energy? [
      ;; If unlimited-energy? is false, proceed as normal
      ask target-prey [ die ]
      set energy energy + predator-gain-from-prey
    ][
      ;; Define an alternative condition for predation under unlimited energy
      ;; For example, you could still require physical proximity
      if distance target-prey < 1 [ ; Adjust proximity threshold as needed
        ask target-prey [ die ]
        ;; Optionally adjust predator's energy or other stats here
      ]
    ]
  ]
end


to reproduce-predators
  if random-float 100 < predator-reproduce and count predators < max-predators [
    set energy (energy / 2)
    hatch 1 [
      rt random-float 360
      fd 1
      set energy [energy] of myself
    ]
  ]
end

to reproduce-preys
  if not unlimited-energy? [
    if random-float 100 < prey-reproduce [
      set energy (energy / 2)
      hatch 1 [
        rt random-float 360
        fd 1
        set energy [energy] of myself
      ]
    ]
  ]
  ;; Optionally, include logic for controlled reproduction even when unlimited energy is on
end

to flock  ;; Adjusted turtle procedure
  find-flockmates
  if any? flockmates [
    find-nearest-neighbor
    ifelse distance nearest-neighbor < (minimum-separation * scale) [
      separate
    ] [
      align
      cohere
      if energy < 50 [  ;; Example condition to prioritize eating leaves
        search-for-leaves
      ]
      if breed = predators and energy >= 50 [  ;; Predators hunt if they have enough energy
        hunt-prey
      ]
    ]
  ]
end

to hunt-prey  ;; Predator procedure
  ;; Adjust to specifically target prey within vision range
  let potential-prey min-one-of (preys in-radius (vision * scale)) [distance myself]
  if potential-prey != nobody [
    face potential-prey  ;; Turn towards the prey
    ;; Additional logic for moving towards prey can be added here
  ]
end

to find-flockmates  ;; Turtle procedure
  ;; Optionally differentiate between predators and prey when finding flockmates
  if breed = preys [
    set flockmates (other preys in-radius (vision * scale)) with [not member? self predators]
  ]
  if breed = predators [
    set flockmates other preys in-radius (vision * scale)
  ]
end


to find-nearest-neighbor ;; Turtle procedure
  ;; This procedure may stay as is, unless changes in flockmate definitions require adjustments
  set nearest-neighbor min-one-of flockmates [distance myself]
end

to death  ; turtle procedure (i.e. wolf, sheep, and predator procedure)
  ; when energy dips below zero, die
  if energy < 0 [ die ]
end
to search-for-leaves
  ;; Agents search for and consume leaves only if unlimited energy is off and their energy is below a threshold
  if not unlimited-energy? and energy < 30 [
    let nearest-leaf min-one-of leaves [distance myself]
    if nearest-leaf != nobody and distance nearest-leaf < 1 [ ; Ensure proximity for consumption
      move-to nearest-leaf
      eat-leaf nearest-leaf
    ]
  ]
end

to eat-leaf [target-leaf]  ;; Turtle procedure, expects a leaf as input
  if not unlimited-energy? [
    ask target-leaf [ die ]  ; Leaf is consumed and removed from the simulation
    set energy energy + leaf-energy-gain  ; Increase energy of the agent
  ]
end

;;; SEPARATION BEHAVIOR

to separate  ;; Turtle procedure to ensure separation between turtles to avoid collisions.
  turn-away ([heading] of nearest-neighbor) max-separate-turn   ;; Turns away from the nearest neighbor by a specified angle to maintain a safe distance.
  pitch-away ([pitch] of nearest-neighbor) max-separate-turn    ;; Pitches away from the nearest neighbor's pitch to avoid overlapping in the 3D space.
end

;;; ALIGNMENT BEHAVIOR
to align  ;; Turtle procedure to align the heading and pitch with nearby flockmates.
  turn-towards average-flockmate-heading max-align-turn  ;; Turns towards the average heading of nearby flockmates to synchronize direction.
  pitch-towards average-flockmate-pitch max-align-turn   ;; Pitches towards the average pitch of nearby flockmates to synchronize the vertical orientation.
end

to-report average-flockmate-heading   ;; Reports the average heading of nearby flockmates.
;; Calculating the average heading using trigonometric functions to handle the circular nature of angles.
  report atan sum [sin heading] of flockmates
              sum [cos heading] of flockmates
end

to-report average-flockmate-pitch  ;; Reports the average pitch of nearby flockmates.
  ;; Similar to heading, the pitch averaging also uses trigonometry to properly average angles over 360 degrees.
  report atan sum [sin pitch] of flockmates
              sum [cos pitch] of flockmates
end

;;; COHESION BEHAVIOR

to cohere  ;; Turtle procedure to move towards the average position of nearby flockmates to enhance group cohesion.
  turn-towards average-heading-towards-flockmates max-cohere-turn   ;; Turns towards the computed average heading towards all nearby flockmates.
  pitch-towards average-pitch-towards-flockmates max-cohere-turn    ;; Pitches towards the computed average pitch towards all nearby flockmates.

end

to-report average-heading-towards-flockmates ;; Reports the average heading towards all flockmates.
  ;; Computes the average heading by converting local headings to global and averaging them.
  report atan mean [sin (towards myself + 180)] of flockmates
              mean [cos (towards myself + 180)] of flockmates
end

to-report average-pitch-towards-flockmates  ;; Reports the average pitch towards all flockmates.
    ;; Calculates the average pitch by inverting the pitch values to ensure correct directional averaging.
  report mean [0 - (towards-pitch myself)] of flockmates
end

;;; HELPER PROCEDURES

to turn-towards [new-heading max-turn]  ;; Turtle procedure to turn towards a specified new heading within a maximum turn limit.
    ;; Calculates the smallest angular difference towards the new heading and applies a limited turn.
  turn-at-most (subtract-headings new-heading heading) ( max-turn * scale )
end

to turn-away [new-heading max-turn]  ;; Turtle procedure to turn away from a specified new heading within a maximum turn limit.
  ;; Calculates the smallest angular difference away from the new heading and applies a limited turn.
  turn-at-most (subtract-headings heading new-heading) ( max-turn * scale )
end

to pitch-towards [new-pitch max-turn]  ;; Turtle procedure to pitch towards a specified new pitch within a maximum turn limit.
  ;; Adjusts the pitch towards a new value, limiting the change to max-turn adjusted by the scale.
  pitch-at-most (subtract-headings new-pitch pitch) ( max-turn * scale )
end

to pitch-away [new-pitch max-turn]  ;; Turtle procedure to pitch away from a specified new pitch within a maximum turn limit.
  ;; Adjusts the pitch away from a new value, limiting the change to max-turn adjusted by the scale.
  pitch-at-most (subtract-headings pitch new-pitch) ( max-turn * scale )
end

;; Turtle procedure to turn right or left by a specified degree that does not exceed the maximum turn limit.
to turn-at-most [turn max-turn]
  ;; Checks if the absolute value of the turn is greater than the maximum allowed turn.
  ifelse abs turn > max-turn
    ;; If the turn needed is greater than the max turn, turn by max turn in the appropriate direction.
    [ ifelse turn > 0
        [ rt max-turn ]   ;; Turn right by max-turn if turn is positive.
        [ lt max-turn ] ] ;; Turn left by max-turn if turn is negative.
    [ rt turn ] ;; If the turn needed is within the limit, turn by that amount.
end

to pitch-at-most [turn max-turn]  ;; Turtle procedure to pitch up or down by a specified degree that does not exceed the maximum turn limit.
  ;; Checks if the absolute value of the pitch change is greater than the maximum allowed pitch.
  ifelse abs turn > max-turn
    [ ifelse turn > 0
        [ tilt-up max-turn ]     ;; Pitch up by max-turn if turn is positive.
        [ tilt-down max-turn ] ] ;; Pitch down by max-turn if turn is negative.
    [ tilt-up turn ] ;; If the pitch change is within the limit, pitch by that amount.
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
439
460
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-16
16
-16
16
-16
16
1
0
1
ticks
30.0

BUTTON
145
122
236
155
setup
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
246
123
339
156
go
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
38
191
224
224
population
population
0
200.0
200.0
1
1
NIL
HORIZONTAL

SLIDER
35
244
223
277
vision
vision
0
10.0
10.0
0.5
1
scaled patches
HORIZONTAL

SLIDER
262
191
526
224
minimum-separation
minimum-separation
0
5
2.5
0.25
1
scaled patches
HORIZONTAL

SLIDER
260
242
483
275
max-align-turn
max-align-turn
0
20
20.0
0.25
1
degrees
HORIZONTAL

SLIDER
261
303
488
336
max-cohere-turn
max-cohere-turn
0
20
4.0
0.25
1
degrees
HORIZONTAL

SLIDER
261
355
499
388
max-separate-turn
max-separate-turn
0
20
0.75
0.25
1
degrees
HORIZONTAL

SLIDER
40
297
221
330
population-predator
population-predator
0
200.0
11.0
1
1
NIL
HORIZONTAL

PLOT
553
12
935
321
populations
Time
Population
0.0
200.0
0.0
200.0
true
true
"" ""
PENS
"prey" 1.0 0 -14439633 true "" "plot count preys"
"predators" 1.0 0 -5298144 true "" "plot count predators"

PLOT
550
320
935
596
Energy Levels
Time
Energy Levels
0.0
200.0
0.0
200.0
true
true
"" ""
PENS
"Prey Energy" 1.0 0 -13840069 true "" "if any? preys [\n  plot mean [energy] of preys\n]\n"
"Predator Energy" 1.0 0 -5298144 true "" "if any? predators [\n  plot mean [energy] of predators\n]\n"
"Leaf Supply" 1.0 0 -7500403 true "" "plot count leaves"

SWITCH
48
354
218
387
unlimited-energy?
unlimited-energy?
0
1
-1000

@#$#@#$#@
## WHAT IS IT?

This model simulates complex ecosystem dynamics within a three-dimensional environment using an extended Boids framework that includes predator-prey interactions and resource competition. The main objective is to explore how changes in behavior and environment settings affect population sustainability and energy dynamics among predators and prey.

## HOW IT WORKS

The model incorporates several agent behaviors: alignment, cohesion, and separation to simulate flocking dynamics. Predators hunt prey to gain energy, while prey consume environmental resources (leaves) to survive. Agents possess a finite amount of energy that depletes with activity, influencing their survival and reproductive capabilities. The environment includes spatial boundaries that agents must navigate, creating a more dynamic interaction space.

## HOW TO USE IT

1. **Setup Button**: Initializes the simulation with the specified number of predators, prey, and environmental features.
2. **Go Button**: Starts the simulation, allowing the agents to move according to the defined rules.

**Sliders:**
- **Population**: Adjusts the number of prey at the start of the simulation.
- **Vision**: Sets the distance each agent can perceive its surroundings, affecting its interactions.
- **Population-Predator**: Determines the initial number of predators.
- **Minimum-Separation**: Defines the minimum distance agents try to maintain from each other.
- **Max-Align-Turn**: Controls the maximum angle agents can turn towards the average heading of their flockmates per tick.
- **Max-Cohere-Turn**: Sets the maximum turning angle towards the average position of nearby agents to maintain group cohesion.
- **Max-Separate-Turn**: Limits the maximum turning angle away from nearby agents to avoid collision.

**Switches:**
- **Unlimited-Energy?**: When turned on, agents do not deplete energy, removing the energy constraint from behavior.

**Monitors and Plots:**
- **Population Plot**: Tracks the number of predators and prey over time.
- **Energy Levels Plot**: Displays the change in energy levels for prey, predators, and the availability of leaves.

## THINGS TO NOTICE

Observe how the initial conditions set by the sliders affect the population dynamics. Notice how quickly energy levels change and how they correlate with population changes. Pay attention to how the  `Unlimited-Energy? ` switch impacts the survival and behavior of agents.

## THINGS TO TRY

- Maximize and the  `Vision ` slider while minimizing other parameters like  `Max-Align-Turn ` to see how enhanced perception affects the agents' ability to survive and form flocks. Then try the opposite.
- Experiment with different levels of `Minimum-Separation` to observe how crowd density affects collision rates and overall flock movement.
- For a comprehensive test run utilizing all parameters, toggle the `Unlimited-Energy?` switch on, set `Vision` and `Max-Align-Turn` to their maximum values, adjust `Minimum-Separation` and `Max-Cohere-Turn` to mid-levels, and keep `Max-Separate-Turn` on the lower end. This setup will allow you to observe how high perception and alignment capabilities impact agent behavior when energy constraints are removed, while still maintaining a moderate degree of cohesion and minimal separation.

## EXTENDING THE MODEL

- Add age attributes to agents to introduce generational changes and life cycles.
- Implement varying energy gain from leaves depending on their type or nutritional value.
- Include seasonal changes that affect resource availability and agent behavior.

## NETLOGO FEATURES

This model utilizes NetLogo's 3D capabilities to simulate agent movement and interaction in a spatially complex environment. Custom sliders and switches are used to manipulate variables in real-time, allowing dynamic exploration of ecological theories.

## RELATED MODELS

- **[Wolf Sheep Predation](https://ccl.northwestern.edu/netlogo/models/WolfSheepPredation)**: Similar predator-prey dynamics but in a simpler ecological model.
- **[Flocking(https://www.netlogoweb.org/launch#http://ccl.northwestern.edu/netlogo/models/models/Sample%20Models/Biology/Flocking.nlogo)]**: Basic behaviors of flock formation and movement dynamics.

## CREDITS AND REFERENCES

I would like to extend my deepest gratitude to Dr. Omar Addam for attending the guest lecture and presenting his inspiring project on Boids simulation, which significantly influenced the development of my own project. I am also profoundly thankful to Professor Christian Jacob for his invaluable discussions and insights regarding this project and for his exceptional lectures, which have greatly enriched my understanding of the subject.

### References: Bibliography

- [NetLogo Flocking Model](https://www.netlogoweb.org/launch#http://ccl.northwestern.edu/netlogo/models/models/Sample%20Models/Biology/Flocking.nlogo)
- [NetLogo 3D Tree Model](https://ccl.northwestern.edu/netlogo/models/TreeSimple3D)
- [NetLogo Wolf Sheep Predation Model](https://ccl.northwestern.edu/netlogo/models/WolfSheepPredation)
- [Omar Addam's Boids Simulation on GitHub](https://github.com/omar-addam/Boids-Simulation)
- [Wikipedia: Boids](https://en.wikipedia.org/wiki/Boids)



@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.4.0
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
